{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Layout/Home/CreateDeckBtn.js","Layout/Home/ViewDeckBtn.js","Layout/Home/StudyDeckBtn.js","Layout/Home/DeleteDeckBtn.js","Layout/Home/Home.js","Layout/study-decks/StudyScreenBreadCrumbs.js","Layout/study-decks/FlipBtn.js","Layout/study-decks/NextBtn.js","Layout/study-decks/AddCardsBtn.js","Layout/study-decks/StudyCard.js","Layout/study-decks/Study.js","Layout/new-decks/CreateDeckBreadCrumb.js","Layout/new-decks/CreateDeckCancelBtn.js","Layout/new-decks/CreateDeckScreen.js","Layout/decks/DeckScreenBreadCrumb.js","Layout/decks/DeckScreenDeleteBtn.js","Layout/decks/DeckScreenCard.js","Layout/decks/DeckInfo.js","Layout/decks/DeckScreen.js","Layout/edit-decks/EditDeckScreenBreadCrumbs.js","Layout/edit-decks/EditDeckCancelBtn.js","Layout/edit-decks/EditDeckScreen.js","Layout/cards-decks/new/AddScreenBreadCrumbsNavBarCard.js","Layout/cards-decks/CardForm.js","Layout/cards-decks/new/AddDoneBtnCard.js","Layout/cards-decks/new/AddScreenCard.js","Layout/cards-decks/edit/EditCardScreenBreadCrumbs.js","Layout/cards-decks/edit/EditCardCancelBtn.js","Layout/cards-decks/edit/EditCardScreen.js","Layout/NotFound.js","Layout/index.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","append","CreateDeckButton","history","useHistory","type","onClick","push","ViewDeckButton","class","StudyDeckButton","DeleteDeckButton","window","confirm","href","Home","useState","decks","setDecks","useEffect","decksFromAPI","loadDecks","map","index","length","description","StudyScreenBreadcrumbNavBar","to","FlipButton","setIsFrontOfCard","currentSide","NextButton","NextCardHandler","AddCardsButton","StudyCard","currentCard","setCurrentCard","cardCount","setCardCount","isFrontOfCard","useRouteMatch","front","back","currentCount","Study","setDeck","setCards","useParams","deckFromAPI","loadDeck","CreateDeckBreadcrumbNavBar","CreateDeckCancelButton","CreateDeckScreen","deckName","setDeckName","deckDescription","setDeckDescription","onSubmit","event","preventDefault","createDeck","then","newDeck","htmlFor","placeholder","onChange","target","value","rows","DeckScreenBreadcrumbNavBar","DeckScreenDeleteDeckButton","DeckScreenCard","handleDeleteCardClick","deleteCard","cardDisplay","DeckInfo","DeckScreen","path","EditDeckScreenBreadcrumbNavBar","EditDeckCancelButton","EditDeckScreen","updateDeck","AddCardScreenBreadcrumbNavBar","CardForm","cardFront","handleCardFrontChange","cardBack","handleCardBackChange","AddCardDoneButton","AddCardScreen","setCardFront","setCardBack","createCard","EditCardScreenBreadcrumbNavBar","EditCardCancelButton","EditCardScreen","preExistingCard","setPreExistingCard","cardFromAPI","loadCard","updateCard","NotFound","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAaeA,MAXf,WACE,OACE,wBAAQC,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,OAAb,sD,kDCHFC,EAAeC,mIAAYD,cAAgB,wBAK3CE,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OADA,YAAuCD,EAAvC,G,SAoBaE,E,kFAAf,WAAyBC,EAAKC,EAASC,GAAvC,eAAAC,EAAA,+EAE2BC,MAAMJ,EAAKC,GAFtC,aAEUI,EAFV,QAIiBC,OAAS,KAAOD,EAASC,OAAS,KAJnD,sBAKY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aALvD,UAQ4B,MAApBH,EAASC,OARjB,yCASa,MATb,wBAYiBD,EAASI,OAZ1B,8EAeuB,eAAf,KAAMC,KAfd,uBAgBMC,QAAQC,MAAM,KAAMC,OAhB1B,sCAmBWC,QAAQC,QAAQb,IAnB3B,2D,sBA4BO,SAAec,EAAtB,kC,4CAAO,WAAyBC,GAAzB,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,gCAEQO,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,kEAeA,WAA0BpB,EAAMoB,GAAhC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,UAECS,EAAU,CACdiB,OAAQ,OACRxB,UACAyB,KAAMC,KAAKC,UAAUzB,EAAWC,IAChCoB,UANG,SAQQlB,EAAUC,EAAKC,EAAS,IARhC,oF,sBAoBA,SAAeqB,EAAtB,oC,4CAAO,WAAwBC,EAAQN,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC+B,EADhC,0BAEQxB,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,kEAcA,WAA0BO,EAAaP,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,EAAYC,GAD5C,iBAECxB,EAAU,CACdiB,OAAQ,MACRxB,UACAyB,KAAMC,KAAKC,UAAUzB,EAAW4B,IAChCP,UANG,SAQQlB,EAAUC,EAAKC,EAASuB,GARhC,oF,sBAoBA,SAAeE,EAAtB,oC,4CAAO,WAA0BH,EAAQN,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC+B,GAC/BtB,EAAU,CAAEiB,OAAQ,SAAUD,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,kEAkBA,WAA0BsB,EAAQI,EAAMV,GAAxC,iBAAAd,EAAA,6DAGCH,EAHD,UAGUR,EAHV,UAILmC,EAAKJ,OAASK,OAAOL,GACftB,EAAU,CACdiB,OAAQ,OACRxB,UACAyB,KAAMC,KAAKC,UAAUM,GACrBV,UATG,SAWQlB,EAAUC,EAAKC,EAAS0B,GAXhC,oF,sBAuBA,SAAeE,EAAtB,oC,4CAAO,WAAwBC,EAAQb,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCsC,GADhC,SAEQ/B,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,kEAcA,WAA0Bc,EAAad,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCuC,EAAYN,IAC3CxB,EAAU,CACdiB,OAAQ,MACRxB,UACAyB,KAAMC,KAAKC,UAAUU,IALlB,SAOQhC,EAAUC,EAAKC,EAAS8B,GAPhC,oF,kEAmBA,WAA0BD,EAAQb,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCsC,GAC/B7B,EAAU,CAAEiB,OAAQ,SAAUD,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,sBA5MPP,EAAQsC,OAAO,eAAgB,oBCMhBC,MAbf,WACE,IAAMC,EAAUC,cAChB,OACE,yBACEC,KAAK,SACL7C,UAAU,gCACV8C,QAAS,kBAAMH,EAAQI,KAAK,eAH9B,UAKE,sBAAM/C,UAAU,eALlB,mBCWWgD,MAdf,YAAmC,IAAT1C,EAAQ,EAARA,KAClBqC,EAAUC,cAEhB,OACE,yBACEC,KAAK,SACLI,MAAM,yBACNH,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBzC,EAAK4B,MAH7C,UAKE,sBAAMe,MAAM,cALd,YCSWC,MAbf,YAAoC,IAAT5C,EAAQ,EAARA,KACnBqC,EAAUC,cAChB,OACE,yBACEC,KAAK,SACLI,MAAM,uBACNH,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBzC,EAAK4B,GAA5B,YAHjB,UAKE,sBAAMe,MAAM,eALd,aCoBWE,MAvBf,YAAqC,IAAT7C,EAAQ,EAARA,KAY1B,OACE,wBAAQuC,KAAK,SAASI,MAAM,iBAAiBH,QATtB,WAErBM,OAAOC,QAAQ,0DAEflB,EAAW7B,EAAK4B,KAKlB,SAGE,mBAAGoB,KAAK,IAAIL,MAAM,aAAlB,SACE,sBAAMA,MAAM,qBCkCLM,MA9Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OATAC,qBAAU,WAAM,4CACd,8BAAA/C,EAAA,6DACQE,EAAWW,IADnB,SAE6BX,EAF7B,OAEQ8C,EAFR,OAGEF,EAASE,GAHX,4CADc,uBAAC,WAAD,wBAMdC,KACC,IAGD,gCACE,cAAC,EAAD,IAGCJ,EAAMK,KAAI,SAACxD,EAAMyD,GAChB,OACE,qBAAKd,MAAM,OAAX,SACE,sBAAKA,MAAM,YAAX,UACE,sBAAKA,MAAM,iCAAX,UACE,oBAAIA,MAAM,aAAV,SAAwB3C,EAAKa,OAC7B,qBAAI8B,MAAM,2BAAV,UACG3C,EAAKC,MAAMyD,OADd,eAIF,mBAAGf,MAAM,YAAT,SAAsB3C,EAAK2D,cAC3B,sBAAKhB,MAAM,SAAX,UACE,sBAAKA,MAAM,UAAX,UACE,cAAC,EAAD,CAAgB3C,KAAMA,IACtB,cAAC,EAAD,CAAiBA,KAAMA,OAEzB,8BACE,cAAC,EAAD,CAAkBA,KAAMA,aAfTyD,U,OCPlBG,MAlBf,YAAwD,IAAjBlC,EAAgB,EAAhBA,OAAQ1B,EAAQ,EAARA,KAC7C,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAI2C,MAAM,aAAV,UACE,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAG,IAAT,UAAa,sBAAMlB,MAAM,eAAzB,aAEF,oBAAIA,MAAM,kBAAV,SACE,cAAC,IAAD,CAAMkB,GAAE,iBAAYnC,GAApB,SAA+B1B,EAAKa,SAEtC,oBAAI8B,MAAM,yBAAyB,eAAa,OAAhD,yBCCOmB,MAZf,YAA2C,IAArBC,EAAoB,EAApBA,iBAKpB,OACE,wBAAQxB,KAAK,SAASI,MAAM,yBAAyBH,QAL/B,WACtBuB,GAAiB,SAACC,GAAD,OAAkBA,MAInC,mBCEWC,MARf,YAA0C,IAApBC,EAAmB,EAAnBA,gBACpB,OACE,wBAAQ3B,KAAK,SAASI,MAAM,kBAAkBH,QAAS0B,EAAvD,mBCYWC,MAbf,YAAqC,IAAXzC,EAAU,EAAVA,OAClBW,EAAUC,cAChB,OACE,yBACEC,KAAK,SACLI,MAAM,kBACNH,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,EAAvB,gBAHjB,UAKE,sBAAMiB,MAAM,eALd,iBC4EWyB,MA3Ef,YAAoE,IAA/CnE,EAA8C,EAA9CA,MAAOoE,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,eAAgB5C,EAAU,EAAVA,OACvD,EAAkCwB,mBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAA0CtB,oBAAS,GAAnD,mBAAOuB,EAAP,KAAsBV,EAAtB,KAEM1B,EAAUC,cACRnC,EAAQuE,cAARvE,IA4BR,OAAIF,EAAMyD,OAAS,EAEf,gCACE,mDACA,+EACiDzD,EAAMyD,OADvD,0BAIA,cAAC,EAAD,CAAgBhC,OAAQA,OAM1B+C,EAEA,qBAAK9B,MAAM,OAAX,SACE,sBAAKA,MAAM,YAAX,UACE,qBAAIA,MAAM,aAAV,kBACQ4B,EADR,OACuBtE,EAAMyD,UAE7B,mBAAGf,MAAM,YAAT,SAAsB0B,EAAYM,QAClC,cAAC,EAAD,CAAYZ,iBAAkBA,SAOpC,qBAAKpB,MAAM,OAAX,SACE,sBAAKA,MAAM,YAAX,UACE,qBAAIA,MAAM,aAAV,kBACQ4B,EADR,OACuBtE,EAAMyD,UAE7B,mBAAGf,MAAM,YAAT,SAAsB0B,EAAYO,OAClC,cAAC,EAAD,CAAYb,iBAAkBA,IAC9B,cAAC,EAAD,CAAYG,gBA7DM,WAElBK,EAAYtE,EAAMyD,QACpBK,GAAiB,SAACC,GAAD,OAAkBA,KACnCM,EAAerE,EAAMsE,IACrBC,GAAa,SAACK,GAAD,OAAkBA,EAAe,MAK5C/B,OAAOC,QACL,8DAGFgB,GAAiB,SAACC,GAAD,OAAkBA,KACnCM,EAAerE,EAAM,IACrBuE,EAAa,GACbnC,EAAQI,KAAKtC,IAEbkC,EAAQI,KAAK,cCCNqC,MA7Bf,WACE,MAAwB5B,mBAAS,IAAjC,mBAAOlD,EAAP,KAAa+E,EAAb,KACA,EAA0B7B,mBAAS,IAAnC,mBAAOjD,EAAP,KAAc+E,EAAd,KACA,EAAsC9B,mBAAS,IAA/C,mBAAOmB,EAAP,KAAoBC,EAApB,KACM5C,EAASuD,cAAYvD,OAc3B,OAXA2B,qBAAU,WAAM,4CACd,8BAAA/C,EAAA,6DACQE,EAAWiB,EAASC,GAD5B,SAE4BlB,EAF5B,OAEQ0E,EAFR,OAGEH,EAAQG,GACRF,EAASE,EAAYjF,OACrBqE,EAAeY,EAAYjF,MAAM,IALnC,4CADc,uBAAC,WAAD,wBAQdkF,KACC,CAACzD,IAGF,gCACE,cAAC,EAAD,CAA6BA,OAAQA,EAAQ1B,KAAMA,IAEnD,yCAAYA,EAAKa,QAEjB,cAAC,EAAD,CAAWZ,MAAOA,EAAOoE,YAAaA,EAAaC,eAAgBA,EAAgB5C,OAAQA,QCZlF0D,MAff,WACE,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAIzC,MAAM,aAAV,UACE,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAG,IAAT,UAAa,sBAAMlB,MAAM,eAAzB,aAEF,oBAAIA,MAAM,yBAAyB,eAAa,OAAhD,+BCOO0C,MAdf,WACE,IAAMhD,EAAUC,cAEhB,OACE,wBACEC,KAAK,SACLI,MAAM,yBACNH,QAAS,kBAAMH,EAAQI,KAAK,MAH9B,qBC4DW6C,MA5Df,WACE,MAAgCpC,mBAAS,IAAzC,mBAAOqC,EAAP,KAAiBC,EAAjB,KACA,EAA8CtC,mBAAS,IAAvD,mBAAOuC,EAAP,KAAwBC,EAAxB,KACMrD,EAAUC,cAiBhB,OACE,gCACE,cAAC,EAAD,IAEA,6CAEA,uBAAMqD,SAdqB,SAACC,GAC9BA,EAAMC,iBdkEH,SAAP,oCcjEIC,CAAW,CACTjF,KAAM0E,EACN5B,YAAa8B,IACZM,MAAK,SAACC,GAAD,OAAa3D,EAAQI,KAAR,iBAAuBuD,EAAQpE,SASlD,UACE,sBAAKe,MAAM,aAAX,UACE,uBAAOsD,QAAQ,WAAf,kBACA,uBACErE,GAAG,WACHW,KAAK,OACL1B,KAAK,WACL8B,MAAM,eACNuD,YAAY,YACZC,SA7BmB,SAACP,GAAD,OAAWJ,EAAYI,EAAMQ,OAAOC,QA8BvDA,MAAOd,OAGX,sBAAK5C,MAAM,aAAX,UACE,uBAAOsD,QAAQ,kBAAf,yBACA,0BACErE,GAAG,kBACHf,KAAK,kBACL8B,MAAM,eACNuD,YAAY,gCACZI,KAAK,IACLH,SAxC0B,SAACP,GAAD,OAClCF,EAAmBE,EAAMQ,OAAOC,QAwCxBA,MAAOZ,OAGX,cAAC,EAAD,IACA,wBAAQlD,KAAK,SAASI,MAAM,kBAA5B,2BCzCO4D,MAff,YAAmD,IAAbhB,EAAY,EAAZA,SACpC,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAI7F,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,eAAC,IAAD,CAAMmE,GAAG,IAAT,UAAa,sBAAMlB,MAAM,eAAzB,aAEF,oBAAIjD,UAAU,yBAAyB,eAAa,OAApD,SACG6F,UCcIiB,MArBf,YAAiD,IAAX9E,EAAU,EAAVA,OAC9BW,EAAUC,cAahB,OACE,wBAAQC,KAAK,SAASI,MAAM,iBAAiBH,QATtB,WAErBM,OAAOC,QAAQ,0DAEflB,EAAWH,GAAQqE,MAAK,kBAAM1D,EAAQI,KAAK,SAK7C,SACE,sBAAME,MAAM,mBC6CH8D,MA7Df,YAAiD,IAAvBxG,EAAsB,EAAtBA,MAAOyB,EAAe,EAAfA,OAAQvB,EAAO,EAAPA,IACjCkC,EAAUC,cAIVoE,EAAwB,SAAC5E,GAE3BgB,OAAOC,QAAQ,0DjB2Md,SAAP,6BiBzMM4D,CAAW7E,EAAKF,KAKdgF,EAAc3G,EAAMuD,KAAI,SAAC1B,EAAM2B,GACnC,OACE,sBAAK/D,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,WAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BoC,EAAK6C,UAEjC,qBAAKjF,UAAU,mBAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BoC,EAAK8C,YAInC,sBAAKjC,MAAM,eAAX,UACE,yBACEJ,KAAK,SACLI,MAAM,8BACNH,QAAS,kBACPH,EAAQI,KAAR,iBAAuBf,EAAvB,kBAAuCI,EAAKF,GAA5C,WAJJ,UAOE,sBAAMe,MAAM,iBAPd,WAUA,wBACEJ,KAAK,SACLI,MAAM,2BACNH,QAAS,kBAAMkE,EAAsB5E,IAHvC,SAOE,mBAAGkB,KAAM7C,EAAKwC,MAAM,aAApB,SACE,sBAAMA,MAAM,yBA7BOc,MAsC/B,OAAIxD,EAAMyD,OACD,8BAAMkD,IAEN,wCCPIC,MAhDf,YAAsE,IAAlDtB,EAAiD,EAAjDA,SAAUE,EAAuC,EAAvCA,gBAAiB/D,EAAsB,EAAtBA,OAAQzB,EAAc,EAAdA,MAAOE,EAAO,EAAPA,IACpDkC,EAAUC,cAElB,OACE,gCACE,6BAAKiD,IACL,4BAAIE,IAEJ,sBAAK/F,UAAU,cAAf,UACE,sBAAKA,UAAU,UAAf,UACE,yBACE6C,KAAK,SACL7C,UAAU,yBACV8C,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,EAAvB,WAHjB,UAKE,sBAAMhC,UAAU,iBALlB,WAOA,yBACE6C,KAAK,SACL7C,UAAU,uBACV8C,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,EAAvB,YAHjB,UAKE,sBAAMiB,MAAM,eALd,YAOA,yBACEJ,KAAK,SACL7C,UAAU,kBACV8C,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,EAAvB,gBAHjB,UAKE,sBAAMhC,UAAU,eALlB,mBASF,8BACE,cAAC,EAAD,CAA4BgC,OAAQA,SAIxC,gCACE,uCAGA,cAAC,EAAD,CAAgBzB,MAAOA,EAAOyB,OAAQA,EAAQvB,IAAKA,WCD5C2G,MAxCf,WACE,MAAwB5D,mBAAS,IAAjC,mBAAOlD,EAAP,KAAa+E,EAAb,KACA,EAA0B7B,mBAAS,IAAnC,mBAAOjD,EAAP,KAAc+E,EAAd,KAEMtD,EAASuD,cAAYvD,OACnBvB,EAAQuE,cAARvE,IAeR,OAZAkD,qBAAU,WAAM,4CACd,8BAAA/C,EAAA,6DACQE,EAAWiB,EAASC,GAD5B,SAE4BlB,EAF5B,OAEQ0E,EAFR,OAGEH,EAAQG,GACRF,EAASE,EAAYjF,OAJvB,4CADc,uBAAC,WAAD,wBAOdkF,KACC,CAACzD,IAIA1B,EAAKa,KAEL,gCACE,cAAC,EAAD,CAA4B0E,SAAUvF,EAAKa,OAE3C,cAAC,IAAD,CAAOkG,KAAM5G,EAAb,SACE,cAAC,EAAD,CACEoF,SAAUvF,EAAKa,KACf4E,gBAAiBzF,EAAK2D,YACtBjC,OAAQA,EACRzB,MAAOA,EACPE,IAAKA,SAMR,cCrBM6G,OAlBf,YAA+D,IAArBzB,EAAoB,EAApBA,SAAU7D,EAAU,EAAVA,OAClD,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAIiB,MAAM,aAAV,UACE,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAG,IAAT,UAAa,sBAAMlB,MAAM,eAAzB,aAEF,oBAAIA,MAAM,kBAAV,SACE,cAAC,IAAD,CAAMkB,GAAE,iBAAYnC,GAApB,SAA+B6D,MAEjC,oBAAI5C,MAAM,yBAAyB,eAAa,OAAhD,6BCEOsE,OAdf,YAA2C,IAAXvF,EAAU,EAAVA,OACxBW,EAAUC,cAEhB,OACE,wBACEC,KAAK,SACL7C,UAAU,yBACV8C,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,KAHxC,qBCwEWwF,OAxEf,WACE,MAAgChE,mBAAS,IAAzC,mBAAOqC,EAAP,KAAiBC,EAAjB,KACA,EAA8CtC,mBAAS,IAAvD,mBAAOuC,EAAP,KAAwBC,EAAxB,KAEMrD,EAAUC,cACVZ,EAASuD,cAAYvD,OA6B3B,OA1BA2B,qBAAU,WAAM,4CACd,8BAAA/C,EAAA,6DACQE,EAAWiB,EAASC,GAD5B,SAE4BlB,EAF5B,OAEQ0E,EAFR,OAGEM,EAAYN,EAAYrE,MACxB6E,EAAmBR,EAAYvB,aAJjC,4CADc,uBAAC,WAAD,wBAOdwB,KACC,CAACzD,IAmBF,gCACE,cAAC,GAAD,CAAgC6D,SAAUA,EAAU7D,OAAQA,IAE5D,2CAEA,uBAAMiE,SAfmB,SAACC,GAC5BA,EAAMC,iBtBuFH,SAAP,oCsBtFIsB,CAAW,CACTvF,GAAIF,EACJb,KAAM0E,EACN5B,YAAa8B,IACZM,MAAK,SAACpE,GAAD,OAAiBU,EAAQI,KAAR,iBAAuBd,EAAYC,SAS1D,UACE,sBAAKlC,UAAU,aAAf,UACE,uBAAOuG,QAAQ,WAAf,kBACA,uBACErE,GAAG,WACHW,KAAK,OACL1B,KAAK,WACL8B,MAAM,eACNwD,SA7BmB,SAACP,GAAD,OAAWJ,EAAYI,EAAMQ,OAAOC,QA8BvDA,MAAOd,OAGX,sBAAK7F,UAAU,aAAf,UACE,uBAAOuG,QAAQ,kBAAf,yBACA,0BACErE,GAAG,kBACHf,KAAK,kBACL8B,MAAM,eACN2D,KAAK,IACLH,SAvC0B,SAACP,GAAD,OAClCF,EAAmBE,EAAMQ,OAAOC,QAuCxBA,MAAOZ,OAGX,cAAC,GAAD,CAAsB/D,OAAQA,IAC9B,wBAAQa,KAAK,SAASI,MAAM,kBAA5B,2BClDOyE,OAlBf,YAA8D,IAArB7B,EAAoB,EAApBA,SAAU7D,EAAU,EAAVA,OACjD,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAIiB,MAAM,aAAV,UACE,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAG,IAAT,UAAa,sBAAMlB,MAAM,eAAzB,aAEF,oBAAIA,MAAM,kBAAV,SACI,cAAC,IAAD,CAAMkB,GAAE,iBAAYnC,GAApB,SAA+B6D,MAEnC,oBAAI5C,MAAM,yBAAyB,eAAa,OAAhD,4BCsBO0E,OA/Bf,YAAyF,IAArEC,EAAoE,EAApEA,UAAWC,EAAyD,EAAzDA,sBAAuBC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,qBAC9D,OACE,gCACE,sBAAK9E,MAAM,aAAX,UACE,uBAAOsD,QAAQ,YAAf,mBACA,0BACErE,GAAG,YACHf,KAAK,YACL8B,MAAM,eACNuD,YAAY,qBACZI,KAAK,IACLH,SAAUoB,EACVlB,MAAOiB,OAGX,sBAAK3E,MAAM,aAAX,UACE,uBAAOsD,QAAQ,WAAf,kBACA,0BACErE,GAAG,WACHf,KAAK,WACL8B,MAAM,eACNuD,YAAY,oBACZI,KAAK,IACLH,SAAUsB,EACVpB,MAAOmB,WCXFE,OAdf,YAAwC,IAAXhG,EAAU,EAAVA,OACrBW,EAAUC,cAEhB,OACE,wBACEC,KAAK,SACL7C,UAAU,yBACV8C,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,KAHxC,mBCyDWiG,OAxDf,WACE,MAAwBzE,mBAAS,IAAjC,mBAAOlD,EAAP,KAAa+E,EAAb,KACA,EAAkC7B,mBAAS,IAA3C,mBAAOoE,EAAP,KAAkBM,EAAlB,KACA,EAAgC1E,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBK,EAAjB,KACMnG,EAASuD,cAAYvD,OA4B3B,OAzBA2B,qBAAU,WAAM,4CACd,8BAAA/C,EAAA,6DACQE,EAAWiB,EAASC,GAD5B,SAE4BlB,EAF5B,OAEQ0E,EAFR,OAGEH,EAAQG,GAHV,4CADc,uBAAC,WAAD,wBAMdC,KACC,CAACzD,IAkBA1B,EAAKa,KAEL,gCACE,cAAC,GAAD,CAA+B0E,SAAUvF,EAAKa,KAAMa,OAAQA,IAC5D,+BAAK1B,EAAKa,KAAV,gBAEA,uBAAM8E,SAfc,SAACC,GACzBA,EAAMC,iB1B8HH,SAAP,+B0B7HIiC,CAAWpG,EAAQ,CAAEiD,MAAO2C,EAAW1C,KAAM4C,IAC7CI,EAAa,IACbC,EAAY,KAWR,UACE,cAAC,GAAD,CACEP,UAAWA,EACXC,sBAxBoB,SAAC3B,GAAD,OAAWgC,EAAahC,EAAMQ,OAAOC,QAyBzDmB,SAAUA,EACVC,qBAzBmB,SAAC7B,GAAD,OAAWiC,EAAYjC,EAAMQ,OAAOC,UA2BzD,cAAC,GAAD,CAAmB3E,OAAQA,IAC3B,wBAAQa,KAAK,SAASI,MAAM,kBAA5B,wBAOD,c,SCrCMoF,OArBf,YAAuE,IAA7BxC,EAA4B,EAA5BA,SAAU7D,EAAkB,EAAlBA,OAAQO,EAAU,EAAVA,OAC1D,OACE,qBAAK,aAAW,aAAhB,SACE,qBAAIU,MAAM,aAAV,UACE,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAG,IAAT,UACE,sBAAMlB,MAAM,eADd,YAKF,oBAAIA,MAAM,kBAAV,SACE,eAAC,IAAD,CAAMkB,GAAE,iBAAYnC,GAApB,mBAAqC6D,OAEvC,qBAAI5C,MAAM,yBAAyB,eAAa,OAAhD,uBACaV,WCAN+F,OAdf,YAA2C,IAAXtG,EAAU,EAAVA,OACxBW,EAAUC,cAEhB,OACE,wBACEC,KAAK,SACLI,MAAM,yBACNH,QAAS,kBAAMH,EAAQI,KAAR,iBAAuBf,KAHxC,qBCoEWuG,OAnEf,WACE,MAAwB/E,mBAAS,IAAjC,mBAAOlD,EAAP,KAAa+E,EAAb,KACA,EAA8C7B,mBAAS,IAAvD,mBAAOgF,EAAP,KAAwBC,EAAxB,KACA,EAAkCjF,mBAAS,IAA3C,mBAAOoE,EAAP,KAAkBM,EAAlB,KACA,EAAgC1E,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBK,EAAjB,KAEMnG,EAASuD,cAAYvD,OACrBO,EAASgD,cAAYhD,OACrBI,EAAUC,cAkChB,OAhCAe,qBAAU,WAAM,4CAEd,8BAAA/C,EAAA,6DACQE,EAAWiB,EAASC,GAD5B,SAE4BlB,EAF5B,OAEQ0E,EAFR,OAGEH,EAAQG,GAHV,4CAFc,kEASd,8BAAA5E,EAAA,6DACQE,EAAWwB,EAASC,GAD5B,SAE4BzB,EAF5B,OAEQ4H,EAFR,OAGED,EAAmBC,GACnBR,EAAaQ,EAAYzD,OACzBkD,EAAYO,EAAYxD,MAL1B,4CATc,0DAgBdO,GAhBc,mCAiBdkD,KACC,CAAC3G,EAAQO,IAeV,gCACE,cAAC,GAAD,CACEsD,SAAUvF,EAAKa,KACfa,OAAQA,EACRO,OAAQA,IAEV,2CAEA,uBAAM0D,SAfmB,SAACC,GAC5BA,EAAMC,iB7BsJH,SAAP,oC6BrJIyC,CAAW,6BAAKJ,GAAN,IAAuBvD,MAAO2C,EAAW1C,KAAM4C,KACtDzB,MAAK,SAAC7D,GAAD,OAAiBG,EAAQI,KAAR,iBAAuBP,EAAYR,aAY1D,UACE,cAAC,GAAD,CACE4F,UAAWA,EACXC,sBAvBsB,SAAC3B,GAAD,OAAWgC,EAAahC,EAAMQ,OAAOC,QAwB3DmB,SAAUA,EACVC,qBAxBqB,SAAC7B,GAAD,OAAWiC,EAAYjC,EAAMQ,OAAOC,UA0B3D,cAAC,GAAD,CAAsB3E,OAAQA,IAC9B,wBAAQa,KAAK,SAASI,MAAM,kBAA5B,2BCzDO4F,OARf,WACE,OACE,qBAAK7I,UAAU,WAAf,SACE,8CCkDS8I,OA3Cf,WACE,OACE,gCACG,cAAC,EAAD,IACD,qBAAK9I,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+I,OAAK,EAAC1B,KAAK,IAAlB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,2BAAZ,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,oCAAZ,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,sBAAZ,SACE,cAAC,GAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,uBAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,UACE,cAAC,GAAD,eC3BG2B,OAZf,WACE,OACE,qBAAKhJ,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqH,KAAK,IAAZ,SACE,cAAC,GAAD,WCRV4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.f05a3468.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CreateDeckButton() {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary mb-2 btn-lg\"\n      onClick={() => history.push(\"/decks/new\")}\n    >\n      <span className=\"oi oi-plus\" /> Create Deck\n    </button>\n  );\n}\n\nexport default CreateDeckButton;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction ViewDeckButton({ deck }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary mr-2\"\n      onClick={() => history.push(`/decks/${deck.id}`)}\n    >\n      <span class=\"oi oi-eye\" /> View\n    </button>\n  );\n}\n\nexport default ViewDeckButton;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction StudyDeckButton({ deck }) {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      class=\"btn btn-primary mr-2\"\n      onClick={() => history.push(`/decks/${deck.id}/study`)}\n    >\n      <span class=\"oi oi-book\" /> Study\n    </button>\n  );\n}\n\nexport default StudyDeckButton;","import React from \"react\";\nimport { deleteDeck } from \"../../utils/api/index\";\n\nfunction DeleteDeckButton({ deck }) {\n  // When the user clicks the \"Delete\" button, the warning message below is shown.\n  // If the user clicks \"OK\", the deck is deleted and the will no longer be visible\n  // on the Home screen\n  const handleTrashClick = () => {\n    if (\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\n    ) {\n      deleteDeck(deck.id);\n    }\n  };\n\n  return (\n    <button type=\"button\" class=\"btn btn-danger\" onClick={handleTrashClick}>\n      {/* Using the anchor element to trigger the home page to refresh after deleting \n      the deck. This causes the deleted deck to no longer be displayed on the Home screen */}\n      <a href=\"/\" class=\"text-white\">\n        <span class=\"oi oi-trash\" />\n      </a>\n    </button>\n  );\n}\n\nexport default DeleteDeckButton;","import React, { useEffect, useState } from \"react\";\nimport { listDecks } from \"../../utils/api/index\";\n\nimport CreateDeckButton from \"./CreateDeckBtn\";\nimport ViewDeckButton from \"./ViewDeckBtn\";\nimport StudyDeckButton from \"./StudyDeckBtn\";\nimport DeleteDeckButton from \"./DeleteDeckBtn\";\n\nfunction Home() {\n  const [decks, setDecks] = useState([]);\n\n  // Loading all of the decks from the API\n  useEffect(() => {\n    async function loadDecks() {\n      const response = listDecks();\n      const decksFromAPI = await response;\n      setDecks(decksFromAPI);\n    }\n    loadDecks();\n  }, []);\n\n  return (\n    <div>\n      <CreateDeckButton />\n\n      {/* Creating a Bootstrap card for each deck and the associated buttons */}\n      {decks.map((deck, index) => {\n        return (\n          <div class=\"card\" key={index}>\n            <div class=\"card-body\">\n              <div class=\"d-flex justify-content-between\">\n                <h5 class=\"card-title\">{deck.name}</h5>\n                <h6 class=\"card-subtitle text-muted\">\n                  {deck.cards.length} cards\n                </h6>\n              </div>\n              <p class=\"card-text\">{deck.description}</p>\n              <div class=\"d-flex\">\n                <div class=\"mr-auto\">\n                  <ViewDeckButton deck={deck} />\n                  <StudyDeckButton deck={deck} />\n                </div>\n                <div>\n                  <DeleteDeckButton deck={deck} />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Home;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction StudyScreenBreadcrumbNavBar({ deckId, deck }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <Link to=\"/\"><span class=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Study\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default StudyScreenBreadcrumbNavBar;","import React from \"react\";\n\nfunction FlipButton({ setIsFrontOfCard }) {\n  const flipCardHandler = () => {\n    setIsFrontOfCard((currentSide) => !currentSide);\n  };\n\n  return (\n    <button type=\"button\" class=\"btn btn-secondary mr-2\" onClick={flipCardHandler}>\n      Flip\n    </button>\n  );\n}\n\nexport default FlipButton;\n","import React from \"react\";\n\nfunction NextButton({ NextCardHandler }) {\n  return (\n    <button type=\"button\" class=\"btn btn-primary\" onClick={NextCardHandler}>\n      Next\n    </button>\n  );\n}\n\nexport default NextButton;","import React from \"react\";\nimport { useHistory } from \"react-router\";\n\nfunction AddCardsButton({ deckId }) {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      class=\"btn btn-primary\"\n      onClick={() => history.push(`/decks/${deckId}/cards/new`)}\n    >\n      <span class=\"oi oi-plus\" /> Add Cards\n    </button>\n  );\n}\n\nexport default AddCardsButton;","import React, { useState } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\n\nimport FlipButton from \"./FlipBtn\";\nimport NextButton from \"./NextBtn\";\nimport AddCardsButton from \"./AddCardsBtn\";\n\nfunction StudyCard({ cards, currentCard, setCurrentCard, deckId }) {\n  const [cardCount, setCardCount] = useState(1);\n  const [isFrontOfCard, setIsFrontOfCard] = useState(true);\n\n  const history = useHistory();\n  const { url } = useRouteMatch();\n\n  // Function to handle clicks of the Next button\n  const NextCardHandler = () => {\n    // Keeping track of which card in the deck the user is currently viewing\n    if (cardCount < cards.length) {\n      setIsFrontOfCard((currentSide) => !currentSide);\n      setCurrentCard(cards[cardCount]);\n      setCardCount((currentCount) => currentCount + 1);\n    } else {\n      // Once the user has reached the final card in the deck, they will be prompted to either restart\n      // the deck of cards, or return to the home page\n      if (\n        window.confirm(\n          \"Restart cards? Click 'cancel' to return to the home page.\"\n        )\n      ) {\n        setIsFrontOfCard((currentSide) => !currentSide);\n        setCurrentCard(cards[0]);\n        setCardCount(1);\n        history.push(url);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  // If there are less than 3 cards in a deck, the user will be prompted to add cards to the deck\n  if (cards.length < 3) {\n    return (\n      <div>\n        <h2>Not enough cards.</h2>\n        <p>\n          You need at least 3 cards to study. There are {cards.length} cards in\n          this deck.\n        </p>\n        <AddCardsButton deckId={deckId} />\n      </div>\n    );\n  }\n\n  // Renders the front of the card and the \"Flip\" button if isFrontOfCard is true\n  if (isFrontOfCard) {\n    return (\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\n            Card {cardCount} of {cards.length}\n          </h5>\n          <p class=\"card-text\">{currentCard.front}</p>\n          <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\n        </div>\n      </div>\n    );\n  }\n  // Renders the back of the card and the \"Flip\" and \"Next\" buttons if isFrontOfCard is false\n  return (\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">\n          Card {cardCount} of {cards.length}\n        </h5>\n        <p class=\"card-text\">{currentCard.back}</p>\n        <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\n        <NextButton NextCardHandler={NextCardHandler} />\n      </div>\n    </div>\n  );\n}\n\nexport default StudyCard;","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\nimport StudyScreenBreadcrumbNavBar from \"./StudyScreenBreadCrumbs\";\nimport StudyCard from \"./StudyCard\";\n\nfunction Study() {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n  const [currentCard, setCurrentCard] = useState({});\n  const deckId = useParams().deckId;\n\n  // Loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n      setCards(deckFromAPI.cards);\n      setCurrentCard(deckFromAPI.cards[0]);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  return (\n    <div>\n      <StudyScreenBreadcrumbNavBar deckId={deckId} deck={deck}/>\n      \n      <h1>Study: {deck.name}</h1>\n\n      <StudyCard cards={cards} currentCard={currentCard} setCurrentCard={setCurrentCard} deckId={deckId}/>\n    </div>\n  );\n}\n\nexport default Study;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction CreateDeckBreadcrumbNavBar() {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <Link to=\"/\"><span class=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Create Deck\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default CreateDeckBreadcrumbNavBar;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CreateDeckCancelButton() {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary mr-2\"\n      onClick={() => history.push(\"/\")}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default CreateDeckCancelButton;\n\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../../utils/api/index\";\n\nimport CreateDeckBreadcrumbNavBar from \"./CreateDeckBreadCrumb\";\nimport CreateDeckCancelButton from \"./CreateDeckCancelBtn\";\n\nfunction CreateDeckScreen() {\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n  const history = useHistory();\n\n  // Handling changes to the deck's name and description in the form\n  const handleDeckNameChange = (event) => setDeckName(event.target.value);\n  const handleDeckDescriptionChange = (event) =>\n    setDeckDescription(event.target.value);\n\n  // Adding new deck to the database. Saved deck will have an \"id\" property\n  // Clicking submit will then take the user to that deck's screen\n  const handleCreateDeckSubmit = (event) => {\n    event.preventDefault();\n    createDeck({\n      name: deckName,\n      description: deckDescription,\n    }).then((newDeck) => history.push(`/decks/${newDeck.id}`));\n  };\n\n  return (\n    <div>\n      <CreateDeckBreadcrumbNavBar />\n\n      <h1>Create Deck</h1>\n\n      <form onSubmit={handleCreateDeckSubmit}>\n        <div class=\"form-group\">\n          <label htmlFor=\"deckName\">Name</label>\n          <input\n            id=\"deckName\"\n            type=\"text\"\n            name=\"deckName\"\n            class=\"form-control\"\n            placeholder=\"Deck Name\"\n            onChange={handleDeckNameChange}\n            value={deckName}\n          />\n        </div>\n        <div class=\"form-group\">\n          <label htmlFor=\"deckDescription\">Description</label>\n          <textarea\n            id=\"deckDescription\"\n            name=\"deckDescription\"\n            class=\"form-control\"\n            placeholder=\"Brief description of the deck\"\n            rows=\"5\"\n            onChange={handleDeckDescriptionChange}\n            value={deckDescription}\n          />\n        </div>\n        <CreateDeckCancelButton />\n        <button type=\"submit\" class=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateDeckScreen;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction DeckScreenBreadcrumbNavBar({ deckName }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\"><span class=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          {deckName}\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default DeckScreenBreadcrumbNavBar;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteDeck } from \"../../utils/api/index\";\n\nfunction DeckScreenDeleteDeckButton({ deckId }) {\n  const history = useHistory();\n  \n  // When the user clicks on the \"Delete\" button associated with a particular deck, they\n  // will be given the warning message below. If the user clicks \"OK\", the deck is deleted\n  // and is no longer visible on the Home screen\n  const handleTrashClick = () => {\n    if (\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\n    ) {\n      deleteDeck(deckId).then(() => history.push(\"/\"));\n    }\n  };\n\n  return (\n    <button type=\"button\" class=\"btn btn-danger\" onClick={handleTrashClick}>\n      <span class=\"oi oi-trash\" />\n    </button>\n  );\n}\n\nexport default DeckScreenDeleteDeckButton;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteCard } from \"../../utils/api/index\";\n\nfunction DeckScreenCard({ cards, deckId, url }) {\n  const history = useHistory();\n\n  // When the user clicks the \"Delete\" button associated with a card, this warning message will show.\n  // If the user clicks \"OK\", the card is deleted using deleteCard()\n  const handleDeleteCardClick = (card) => {\n    if (\n      window.confirm(\"Delete this card? You will not be able to recover it.\")\n    ) {\n      deleteCard(card.id);\n    } \n  };\n\n  // Creates a Bootstrap card for each card in the deck with an edit and delete button\n  const cardDisplay = cards.map((card, index) => {\n    return (\n      <div className=\"card\" key={index}>\n        <div className=\"card-body row\">\n          <div className=\"col-md-5\">\n            <p className=\"card-text\">{card.front}</p>\n          </div>\n          <div className=\"col-md-5 ml-auto\">\n            <p className=\"card-text\">{card.back}</p>\n          </div>\n        </div>\n\n        <div class=\"ml-auto mt-2\">\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary mr-2 mb-2\"\n            onClick={() =>\n              history.push(`/decks/${deckId}/cards/${card.id}/edit`)\n            }\n          >\n            <span class=\"oi oi-pencil\" /> Edit\n          </button>\n\n          <button\n            type=\"button\"\n            class=\"btn btn-danger mr-3 mb-2\"\n            onClick={() => handleDeleteCardClick(card)}\n          >\n            {/* The anchor element will trigger the page to refresh after the card has been deleted.\n            This makes it so that the refreshed page will no longer display the deleted card. */}\n            <a href={url} class=\"text-white\">\n              <span class=\"oi oi-trash\" />\n            </a>\n          </button>\n        </div>\n      </div>\n    );\n  });\n\n  // If there are cards in this deck, they will render. If not, the following message will return instead.\n  if (cards.length) {\n    return <div>{cardDisplay}</div>;\n  } else {\n    return \"There are no cards in this deck yet!\";\n  }\n}\n\nexport default DeckScreenCard;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DeckScreenDeleteDeckButton from \"./DeckScreenDeleteBtn\";\nimport DeckScreenCard from \"./DeckScreenCard\";\n\n// This component displays all of a specific deck's info and the buttons used to interact with the deck\nfunction DeckInfo({ deckName, deckDescription, deckId, cards, url }) {\n    const history = useHistory();\n\n  return (\n    <div>\n      <h1>{deckName}</h1>\n      <p>{deckDescription}</p>\n\n      <div className=\"d-flex mb-4\">\n        <div className=\"mr-auto\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary mr-2\"\n            onClick={() => history.push(`/decks/${deckId}/edit`)}\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-2\"\n            onClick={() => history.push(`/decks/${deckId}/study`)}\n          >\n            <span class=\"oi oi-book\" /> Study\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => history.push(`/decks/${deckId}/cards/new`)}\n          >\n            <span className=\"oi oi-plus\" /> Add Cards\n          </button>\n        </div>\n\n        <div>\n          <DeckScreenDeleteDeckButton deckId={deckId} />\n        </div>\n      </div>\n\n      <div>\n        <h2>Cards</h2>\n\n        {/* Renders the cards in the deck and the edit card and delete card buttons */}\n        <DeckScreenCard cards={cards} deckId={deckId} url={url} />\n      </div>\n    </div>\n  );\n}\n\nexport default DeckInfo;","import React, { useEffect, useState } from \"react\";\nimport { Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\n\nimport DeckScreenBreadcrumbNavBar from \"./DeckScreenBreadCrumb\";\nimport DeckInfo from \"./DeckInfo\";\n\nfunction DeckScreen() {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n\n  const deckId = useParams().deckId;\n  const { url } = useRouteMatch();\n\n  // loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n      setCards(deckFromAPI.cards);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // If the deck has been fetched from the API, the breadcrumb nav bar and deck info will display\n\n  if (deck.name) {\n    return (\n      <div>\n        <DeckScreenBreadcrumbNavBar deckName={deck.name} />\n\n        <Route path={url}>\n          <DeckInfo\n            deckName={deck.name}\n            deckDescription={deck.description}\n            deckId={deckId}\n            cards={cards}\n            url={url}\n          />\n        </Route>\n      </div>\n    );\n  }\n  return \"Loading...\";\n}\n\nexport default DeckScreen;","\n   \nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction EditDeckScreenBreadcrumbNavBar({ deckName, deckId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <Link to=\"/\"><span class=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>{deckName}</Link>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Edit Deck\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default EditDeckScreenBreadcrumbNavBar;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction EditDeckCancelButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default EditDeckCancelButton;","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\n\nimport EditDeckScreenBreadcrumbNavBar from \"./EditDeckScreenBreadCrumbs\";\nimport EditDeckCancelButton from \"./EditDeckCancelBtn\";\n\nfunction EditDeckScreen() {\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n\n  const history = useHistory();\n  const deckId = useParams().deckId;\n\n  // loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeckName(deckFromAPI.name);\n      setDeckDescription(deckFromAPI.description);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // Handling changes to the deck name and deck description in the form\n  const handleDeckNameChange = (event) => setDeckName(event.target.value);\n  const handleDeckDescriptionChange = (event) =>\n    setDeckDescription(event.target.value);\n\n  // Updating the pre-existing deck with the changes to the deck name and description\n  // Clicking submit will take the user to that deck's screen\n  const handleEditDeckSubmit = (event) => {\n    event.preventDefault();\n    updateDeck({\n      id: deckId,\n      name: deckName,\n      description: deckDescription,\n    }).then((updatedDeck) => history.push(`/decks/${updatedDeck.id}`));\n  };\n\n  return (\n    <div>\n      <EditDeckScreenBreadcrumbNavBar deckName={deckName} deckId={deckId} />\n\n      <h1>Edit Deck</h1>\n\n      <form onSubmit={handleEditDeckSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckName\">Name</label>\n          <input\n            id=\"deckName\"\n            type=\"text\"\n            name=\"deckName\"\n            class=\"form-control\"\n            onChange={handleDeckNameChange}\n            value={deckName}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckDescription\">Description</label>\n          <textarea\n            id=\"deckDescription\"\n            name=\"deckDescription\"\n            class=\"form-control\"\n            rows=\"5\"\n            onChange={handleDeckDescriptionChange}\n            value={deckDescription}\n          />\n        </div>\n        <EditDeckCancelButton deckId={deckId} />\n        <button type=\"submit\" class=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditDeckScreen;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction AddCardScreenBreadcrumbNavBar({ deckName, deckId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <Link to=\"/\"><span class=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li class=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deckName}</Link>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Add Card\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default AddCardScreenBreadcrumbNavBar;","import React from \"react\";\n\n// Component to be used in both the Add Card and Edit Card Screens\n\nfunction CardForm({ cardFront, handleCardFrontChange, cardBack, handleCardBackChange }) {\n  return (\n    <div>\n      <div class=\"form-group\">\n        <label htmlFor=\"cardFront\">Front</label>\n        <textarea\n          id=\"cardFront\"\n          name=\"cardFront\"\n          class=\"form-control\"\n          placeholder=\"Front side of card\"\n          rows=\"3\"\n          onChange={handleCardFrontChange}\n          value={cardFront}\n        />\n      </div>\n      <div class=\"form-group\">\n        <label htmlFor=\"cardBack\">Back</label>\n        <textarea\n          id=\"cardBack\"\n          name=\"cardBack\"\n          class=\"form-control\"\n          placeholder=\"Back side of card\"\n          rows=\"3\"\n          onChange={handleCardBackChange}\n          value={cardBack}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default CardForm;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction AddCardDoneButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Done\n    </button>\n  );\n}\n\nexport default AddCardDoneButton;","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck, createCard } from \"../../../utils/api/index\";\n\nimport AddCardScreenBreadcrumbNavBar from \"./AddScreenBreadCrumbsNavBarCard\";\nimport CardForm from \"../CardForm\";\nimport AddCardDoneButton from \"./AddDoneBtnCard\";\n\nfunction AddCardScreen() {\n  const [deck, setDeck] = useState({});\n  const [cardFront, setCardFront] = useState(\"\");\n  const [cardBack, setCardBack] = useState(\"\");\n  const deckId = useParams().deckId;\n\n  // Loading the deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // Handling changes to the card front and card back from the form\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\n\n  // When the user clicks on the \"Save\" button, the new card will be created using createCard()\n  // The textarea for the card front and back will be cleared and the process for adding a \n  // card is restarted.\n  const handleAddCardSave = (event) => {\n    event.preventDefault();\n    createCard(deckId, { front: cardFront, back: cardBack });\n    setCardFront(\"\");\n    setCardBack(\"\");\n  };\n\n  // If the deck was properly fetched from the API, the following will render properly.\n  // Otherwise, \"Loading...\" will display\n  if (deck.name) {\n    return (\n      <div>\n        <AddCardScreenBreadcrumbNavBar deckName={deck.name} deckId={deckId} />\n        <h2>{deck.name}: Add Card</h2>\n  \n        <form onSubmit={handleAddCardSave}>\n          <CardForm\n            cardFront={cardFront}\n            handleCardFrontChange={handleCardFrontChange}\n            cardBack={cardBack}\n            handleCardBackChange={handleCardBackChange}\n          />\n          <AddCardDoneButton deckId={deckId} />\n          <button type=\"submit\" class=\"btn btn-primary\">\n            Save\n          </button>\n        </form>\n      </div>\n    );\n  }\n  return \"Loading...\";\n}\n\nexport default AddCardScreen;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction EditCardScreenBreadcrumbNavBar({ deckName, deckId, cardId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <Link to=\"/\">\n            <span class=\"oi oi-home\" />\n            Home\n          </Link>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>Deck: {deckName}</Link>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Edit Card {cardId}\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default EditCardScreenBreadcrumbNavBar;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction EditCardCancelButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default EditCardCancelButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, readCard, updateCard } from \"../../../utils/api/index\";\n\nimport EditCardScreenBreadcrumbNavBar from \"./EditCardScreenBreadCrumbs\";\nimport CardForm from \"../CardForm\";\nimport EditCardCancelButton from \"./EditCardCancelBtn\";\n\nfunction EditCardScreen() {\n  const [deck, setDeck] = useState({});\n  const [preExistingCard, setPreExistingCard] = useState({});\n  const [cardFront, setCardFront] = useState(\"\");\n  const [cardBack, setCardBack] = useState(\"\");\n\n  const deckId = useParams().deckId;\n  const cardId = useParams().cardId;\n  const history = useHistory();\n\n  useEffect(() => {\n    // function to load the deck from the API\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n    }\n\n    // function to load the card from the API\n    async function loadCard() {\n      const response = readCard(cardId);\n      const cardFromAPI = await response;\n      setPreExistingCard(cardFromAPI);\n      setCardFront(cardFromAPI.front);\n      setCardBack(cardFromAPI.back);\n    }\n    loadDeck();\n    loadCard();\n  }, [deckId, cardId]);\n\n  // handling form changes\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\n\n  // Updating the card with the changes to the front and back of the card\n  // Clicking submit will also then take the user back to that deck's screen\n  const handleEditCardSubmit = (event) => {\n    event.preventDefault();\n    updateCard({ ...preExistingCard, front: cardFront, back: cardBack })\n      .then((updatedCard) => history.push(`/decks/${updatedCard.deckId}`));\n  };\n\n  return (\n    <div>\n      <EditCardScreenBreadcrumbNavBar\n        deckName={deck.name}\n        deckId={deckId}\n        cardId={cardId}\n      />\n      <h1>Edit Card</h1>\n\n      <form onSubmit={handleEditCardSubmit}>\n        <CardForm\n          cardFront={cardFront}\n          handleCardFrontChange={handleCardFrontChange}\n          cardBack={cardBack}\n          handleCardBackChange={handleCardBackChange}\n        />\n        <EditCardCancelButton deckId={deckId} />\n        <button type=\"submit\" class=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditCardScreen;","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Home from \"./Home/Home\";\nimport Study from \"./study-decks/Study\";\nimport CreateDeckScreen from \"./new-decks/CreateDeckScreen\";\nimport DeckScreen from \"./decks/DeckScreen\";\nimport EditDeckScreen from \"./edit-decks/EditDeckScreen\";\nimport AddCardScreen from \"./cards-decks/new/AddScreenCard\";\nimport EditCardScreen from \"./cards-decks/edit/EditCardScreen\";\nimport NotFound from \"./NotFound\";\n\nfunction Layout() {\n  return (\n    <div>\n       <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route path=\"/decks/new\">\n            <CreateDeckScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCardScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCardScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeckScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n\n          <Route path=\"/decks/:deckId\">\n            <DeckScreen />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}